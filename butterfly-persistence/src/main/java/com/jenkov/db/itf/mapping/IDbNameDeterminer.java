/*
    Copyright 2008 Jenkov Development

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/



/**
 * User: Administrator
 */
package com.jenkov.db.itf.mapping;

import com.jenkov.db.itf.PersistenceException;

import java.sql.Connection;
import java.util.Collection;

/**
 * This interface represents the database name determiner to be used with Butterfly Persistence.
 * The responsibility of the database name determiner is to determine which column name of a
 * given collection of names exists in the table in the database.
 *
 * <br/><br/>
 * The database name determiner is used internally in the object mapper. The collection of
 * possible column names is usually generated by the database name guesser, also used
 * internally in the object mapper.
 *
 * @author Jakob Jenkov, Jenkov Development
 */
public interface IDbNameDeterminer {

    /**
     * Returns the type for a given column in a given table. Note, this method only works
     * if the determineColumnName worked (returned a name != null)
     *
     * @param columnName The name of the column to get the data type for.
     * @param tableName  The name of the table where the column is defined.
     * @return An int matching one of the java.sql.Types.XXX type constants.
     */
    public int getColumnType(String columnName, String tableName);

    /**
     * Determines which, if any, of the given possible column names in the given collection is matching
     * a column name in the given table. If no column name is matching any of the names in the collection
     * null is returned. If more than one of the possible column names matches a column in the table,
     * a PersistenceException is thrown.
     *
     * @param names      The collection of possible column names.
     * @param tableName  The name of the database table to check for column matches in.
     * @param connection The connection to the database to determine column name in.
     * @return           The matching column name. Null if no matching column name was found.
     * @throws PersistenceException If anything goes wrong during the name determining, or if
     *                   more than one of the possible column names matches a column in the
     *                   table.
     */
    public String determineColumnName(Collection names, String tableName, Connection connection) throws PersistenceException;


    /**
     * Determines which, if any, of the given possible table names in the given collection is matching
     * a table name in the database. If no table name is matching any of the names in the collection
     * a <code>PersistenceException</code> is thrown. If more than one of the possible table names matches a
     * table in the database a PersistenceException is also thrown.
     *
     * @param names      The collection of possible table names.
     * @param connection The connection to the database to determine table name in.
     * @return           The matching table name.
     * @throws PersistenceException If anything goes wrong during the name determining, or if
     *                   none or more than one of the possible table names matches a table in the
     *                   database.
     */
    public String determineTableName(Collection names, Connection connection)
            throws PersistenceException;


    /**
     * Determines which, if any, of the given possible table names in the given collection is matching
     * a table name in the database. If no table name is matching any of the names in the collection
     * a <code>PersistenceException</code> is thrown. If more than one of the possible table names matches a
     * table in the database a PersistenceException is also thrown.
     *
     * @param names      The collection of possible table names.
     * @param databaseName The name of the database. Set to null if not known. The database name is usually
     *                   implicitly referenced in the database connection, so you most often won't need to
     *                   set this parameter to anything but null.
     * @param connection The connection to the database to determine table name in.
     * @return           The matching table name.
     * @throws PersistenceException If anything goes wrong during the name determining, or if
     *                   none or more than one of the possible table names matches a table in the
     *                   database.
     */
    public String determineTableName(Collection names, String databaseName, Connection connection)
            throws PersistenceException;

}
