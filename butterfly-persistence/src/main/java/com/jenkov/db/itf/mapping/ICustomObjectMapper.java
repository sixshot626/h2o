/*
    Copyright 2008 Jenkov Development

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/



package com.jenkov.db.itf.mapping;

import com.jenkov.db.itf.PersistenceException;

/**
 * A custom object mapper can assist the IGenericDao instances with the mapping
 * of classes to database tables. A custom object mapper has 3 options:
 * <br/><br/>
 *
 * <ol>
 * <li>Create a complete mapping manually, programmatically. <br/>
 *     Useful when the objects to map
 *     do not match any tables in the database. Either because the names are too different,
 *     or for instance if you are mapping a class to an SQL query (select sum(...) from...)
 *     where the columns in the query do not exist in any table.</li>
 *
 * <li>Only provide the table name which the given class is to be mapped to.<br/>
 *     Useful when the getters / setters match the column names, but the class and
 *     table names don't match. For instance mapping Employee.class to table "persons".
 *     <br/></li>
 *
 * <li>Modify the mapping generated by the object mapper, after it was generated,
 *     but before it is used.<br/>
 *     This is very useful if you need to add extra information to an
 *     auto-generated object mapping,
 *     for instance a getter / setter that needs to be mapped to a column that has
 *     a name that cannot be guessed. Or, for instance to mark on the primary key
 *     getter mapping of the object mapping, that the primary key is autogenerated
 *     by the database. The object mapper is not yet capable of auto-detecting
 *     auto-generated columns. This is because it is missing in JDBC.
 *     <br/></li>
 *</ol>
 *
 * <br/>
 * If a custom mapper does nothing (returns null for all three assisting methods)
 * the object mapping will be fully auto-generated.
 *
 * @author Jakob Jenkov,
 *         Copyright 2004 Jenkov Development
 */
public interface ICustomObjectMapper {


    /**
     * Creates an object mapping for the given object mapping key.
     * @param objectMappingKey 
     * @return
     */
    public IObjectMapping getObjectMapping(Object objectMappingKey) throws PersistenceException;

    /**
     *
     * @param objectMappingKey
     * @return
     */
    public String getTableName(Object objectMappingKey) throws PersistenceException;


    public void modify(Object objectMappingKey, IObjectMapping mapping) throws PersistenceException;
}
