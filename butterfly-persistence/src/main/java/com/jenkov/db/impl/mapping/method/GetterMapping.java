/*
    Copyright 2008 Jenkov Development

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/



package com.jenkov.db.impl.mapping.method;

import com.jenkov.db.itf.PersistenceException;
import com.jenkov.db.itf.mapping.IGetterMapping;

import java.lang.reflect.InvocationTargetException;
import java.sql.PreparedStatement;
import java.sql.SQLException;


public class GetterMapping extends MethodMapping implements IGetterMapping{

    protected boolean isAutoGenerated = false;

    public boolean isAutoGenerated() {
        return isAutoGenerated;
    }

    public void setAutoGenerated(boolean autoGenerated) {
        isAutoGenerated = autoGenerated;
    }

    public void insertValueFromObject(Object target, PreparedStatement statement, int index) throws PersistenceException{
        try {
            insertObjectDo(getObjectMethod().invoke(target, null), statement, index);
        } catch (SQLException e) {
            throw new PersistenceException("Could not insert value of type  "
                    + getObjectMethod().getReturnType() + "  for field  "
                    + getColumnName() + "  from object into PreparedStatement", e);
        } catch (InvocationTargetException e) {
            throw new PersistenceException("Could not insert value of type  "
                    + getObjectMethod().getReturnType() + "  for field  "
                    + getColumnName() + "  from object into PreparedStatement", e);
        } catch (IllegalAccessException e) {
            throw new PersistenceException("Could not insert value of type  "
                    + getObjectMethod().getReturnType() + "  for field  "
                    + getColumnName() + "  from object into PreparedStatement", e);
        }
    }

    public void insertObject(Object value, PreparedStatement statement, int index) throws PersistenceException {
        try {
            insertObjectDo(value, statement, index);
        } catch (SQLException e) {
            throw new PersistenceException("Error inserting value (" + value + ") at index " + index
                + " in PreparedStatement (" + statement + ")" );
        }
    }


    protected void insertObjectDo(Object value, PreparedStatement statement, int index) throws SQLException{
        //System.out.println("GetterMapping.insertObject");
    }
}
