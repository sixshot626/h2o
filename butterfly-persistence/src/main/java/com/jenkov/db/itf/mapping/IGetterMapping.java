/*
    Copyright 2008 Jenkov Development

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/



package com.jenkov.db.itf.mapping;

import com.jenkov.db.itf.PersistenceException;

import java.sql.PreparedStatement;

/**
 * This interface represents the functions special to getter method mappings.
 * Getter method mappings represent a method from a getter method in a class
 * to a column in the database.
 * <br/><br/>
 * Getter method mappings are used when writing/updating objects to/in the database.
 * Getter method mappings can extract the values from objects to be inserted/updated
 * by calling the getter method they are method from (on the target object),
 * and insert these values into a <code>PreparedStatement</code>). Getter method
 * mappings are also used when doing a read-by-primary-key.
 *
 * @author Jakob Jenkov, Jenkov Development
 */
public interface IGetterMapping extends IMethodMapping{

    /**
     * This method extracts a value from an object by calling the getter method associated
     * with this getter method method on the target object. The extracted value is
     * inserted into the given <code>PreparedStatement</code> as a statement parameter using the
     * given index as index to what "?" in the <code>PreparedStatement</code> to insert
     * the value for.
     *
     * @param target    The object to extract the value from.
     * @param statement The <code>PreparedStatement</code> to insert the value into.
     * @param index     The index to insert the value into the <code>PreparedStatement</code> at.
     * @throws PersistenceException If anything goes wrong during the insertion.
     */
    public void    insertValueFromObject(Object target, PreparedStatement statement, int index) throws PersistenceException;


    /**
     * This method inserts the given object into the given <code>PreparedStatement</code>
     * as a statement parameter using the given index as index to what "?" in
     * the <code>PreparedStatement</code> to insert the value for.
     *
     * @param value     The object to insert.
     * @param statement The <code>PreparedStatement</code> to insert the value into.
     * @param index     The index to insert the value into the <code>PreparedStatement</code> at.
     * @throws PersistenceException If anything goes wrong during the insertion.
     */
    public void    insertObject(Object value, PreparedStatement statement, int index) throws PersistenceException;


    /**
     * Returns whether or not the value of the column in the database matching this getter method method
     * is auto generated by the database. Examples of auto generated column values are primary key values
     * that are inserted automatically by the database when a new record is inserted, or r timestamps
     * columns updated by the database each time a record is updated.
     *
     * <br/><br/>
     * It is important to mark getter method mappings as auto generated if they are. Trying to specify a
     * value for an auto generated column when inserting or updating records will result in a
     * database error. The database will refuse this action. Therefore it is essential for the
     * SQL generator and the object writer to know if a certain column is auto generated, so they
     * can exclude it from inserts and updates. The getter method method of an auto generated
     * column cannot be removed altogether though. If the column is a primary key the getter method
     * method is still used when executing read-by-primary-key, delete, or delete-by-primary-key actions.
     *
     * @return True if the value of the column matching this getter method method is auto generated.
     *         False if not.
     */
    public boolean isAutoGenerated();


    /**
     * Sets whether or not the value of the column in the database matching this getter method method
     * is auto generated by the database. Examples of auto generated column values are primary key values
     * that are inserted automatically by the database when a new record is inserted, or timestamps
     * columns updated by the database each time a record is updated.
     *
     * <br/><br/>
     * It is important to mark getter method mappings as auto generated if they are. Trying to specify a
     * value for an auto generated column when inserting or updating records will result in a
     * database error. The database will refuse this action. Therefore it is essential for the
     * SQL generator and the object writer to know if a certain column is auto generated, so they
     * can exclude it from inserts and updates. The getter method method of an auto generated
     * column cannot be removed altogether though. If the column is a primary key the getter method
     * method is still used when executing read-by-primary-key, delete, or delete-by-primary-key actions.
     *
     * @param isAutoGenerated Set to true if the column value is auto generated by the database.
     *        False if not.
     */
    public void    setAutoGenerated(boolean isAutoGenerated);


}
